name: Synchronize and Convert Rules

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  sync-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout My Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Sigma Backend Plugin
        run: |
          sigma plugin install golangexpr

      - name: Verify Tools Installation
        run: |
          sigma version
          python3 --version

      - name: Clone Source Repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.3
        with:
          owner: 'ecologicsystemlink'
          repository: 'sigma-simple'
          branch: 'main'
          
      - name: Move cloned repository
        run: |
          mv ${{ github.workspace }}/sigma-simple ${{ github.workspace }}/source-repo

      - name: Get last synchronized commit
        id: last-commit
        run: |
          cd ${{ github.workspace }}
          if [ -f ".last_synced_commit" ]; then
            echo "LAST_KNOWN_COMMIT=$(cat .last_synced_commit)" >> $GITHUB_OUTPUT
          else
            echo "LAST_KNOWN_COMMIT=" >> $GITHUB_OUTPUT
          fi

      - name: Find modified files
        id: diff
        run: |
          cd ${{ github.workspace }}/source-repo
          if [ -z "${{ steps.last-commit.outputs.LAST_KNOWN_COMMIT }}" ]; then
            echo "First execution, processing all files..."
            find . -name "*.yml" \( -path "*/rules/*" -o -path "*/rules-*/*" \) > ${{ github.workspace }}/modified_files.txt
          else
            echo "Looking for changes since ${{ steps.last-commit.outputs.LAST_KNOWN_COMMIT }}..."
            
            DIFF_OUTPUT=$(git diff --name-only ${{ steps.last-commit.outputs.LAST_KNOWN_COMMIT }} HEAD -- '*.yml')
            DIFF_EXIT=$?
            
            if [ $DIFF_EXIT -ne 0 ]; then
              echo "Error: git diff command failed (exit code: $DIFF_EXIT)"
              exit 1
            fi
            
            if [ -z "$DIFF_OUTPUT" ]; then
              echo "No .yml files modified since last sync"
              touch ${{ github.workspace }}/modified_files.txt
            else
              echo "Found modified .yml files, filtering for rules directories..."
              echo "$DIFF_OUTPUT"
              
              echo "$DIFF_OUTPUT" | grep -E '^rules/|/rules/|rules-[^/]+/' > ${{ github.workspace }}/modified_files.txt
              GREP_EXIT=$?
              
              if [ $GREP_EXIT -eq 0 ]; then
                echo "Found files matching rules directory pattern"
              elif [ $GREP_EXIT -eq 1 ]; then
                echo "No files found in rules directories - creating empty file"
                touch ${{ github.workspace }}/modified_files.txt
              else
                echo "Error: grep command failed (exit code: $GREP_EXIT)"
                exit 1
              fi
            fi
          fi

      - name: Validate modified files
        id: modified-files
        run: |
          cd ${{ github.workspace }}
          if [ ! -f "modified_files.txt" ]; then
            echo "Error: modified_files.txt not found"
            exit 1
          fi
          
          if [ ! -s "modified_files.txt" ]; then
            echo "No modified files found, skipping conversion"
            echo "skip_conversion=true" >> $GITHUB_OUTPUT
          else
            echo "Found $(wc -l < modified_files.txt) files to process"
            echo "skip_conversion=false" >> $GITHUB_OUTPUT
          fi

      - name: Execute Conversion Script
        if: steps.modified-files.outputs.skip_conversion == 'false'
        run: |
          cd ${{ github.workspace }}
          echo "Starting conversion process..."
          if ! python convert_entry.py ${{ github.workspace }}/modified_files.txt; then
            echo "Error: Conversion script failed"
            exit 1
          fi
          echo "Conversion completed successfully"
      
      - name: Configure Git
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Save new synchronization point to main branch
        if: steps.modified-files.outputs.skip_conversion == 'false'
        run: |
          cd ${{ github.workspace }}
          
          cd ${{ github.workspace }}/source-repo
          git rev-parse HEAD > ${{ github.workspace }}/.last_synced_commit
          
          cd ${{ github.workspace }}
          git add .last_synced_commit
          
          if git diff --staged --quiet; then
            echo "No changes in synchronization state"
          else
            git commit -m "Update synchronization state to latest processed commit"
            git push origin main
            echo "Synchronization state updated in main branch"
          fi
          
      - name: Create batches and commit files
        if: steps.modified-files.outputs.skip_conversion == 'false'
        run: |
          cd ${{ github.workspace }}
          
          git add .
          
          git status --porcelain | grep -E "\.(yml|yaml)$" > changed_files.txt
          
          if [ ! -s "changed_files.txt" ]; then
            echo "No YAML files were changed after conversion"
            exit 0
          fi
          
          echo "Found $(wc -l < changed_files.txt) YAML files changed"
          
          git reset HEAD
          
          split -l 10 changed_files.txt batch_
          
          batch_count=1
          total_batches=$(ls batch_* | wc -l)
          
          for batch_file in batch_*; do
            echo "Processing batch $batch_count of $total_batches..."
            
            files_added=0
            while read -r status_line; do
              file_path=$(echo "$status_line" | awk '{print $NF}')
              
              if [ -f "$file_path" ]; then
                git add "$file_path"
                files_added=$((files_added + 1))
              fi
            done < "$batch_file"
            
            if [ $files_added -gt 0 ]; then
              git commit -m "Batch $batch_count/$total_batches: Convert $files_added Sigma rules to UTMSTACK format"
              echo "Committed batch $batch_count with $files_added files"
            else
              echo "No files to commit in batch $batch_count"
            fi
            
            batch_count=$((batch_count + 1))
          done
          
          rm -f batch_* changed_files.txt
          
          echo "All batches processed successfully"

      - name: Generate unique branch name
        id: branch
        if: steps.modified-files.outputs.skip_conversion == 'false'
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="sync/automatic-update-${TIMESTAMP}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "Generated branch name: ${BRANCH_NAME}"

      - name: Create and push commits to new branch
        id: push-branch
        if: steps.modified-files.outputs.skip_conversion == 'false'
        run: |
          cd ${{ github.workspace }}
    
          COMMITS_TO_PUSH=$(git rev-list --count origin/main..HEAD)
          if [ "$COMMITS_TO_PUSH" -eq 0 ]; then
            echo "No commits to push, skipping branch creation"
            echo "should_create_pr=false" >> $GITHUB_OUTPUT
          else
            echo "Found $COMMITS_TO_PUSH commits to push"
            echo "Creating branch: ${{ steps.branch.outputs.BRANCH_NAME }}"
            git checkout -b ${{ steps.branch.outputs.BRANCH_NAME }}
            git push origin ${{ steps.branch.outputs.BRANCH_NAME }}
            echo "Successfully pushed commits to branch"
            echo "should_create_pr=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.push-branch.outputs.should_create_pr == 'true'
        run: |
          TIMESTAMP=$(date '+%Y-%m-%d at %H:%M UTC')
          
          gh pr create \
            --title "Sync: Sigma rules (${TIMESTAMP})" \
            --body "Automatic synchronization of Sigma rules from source repository." \
            --base main \
            --head ${{ steps.branch.outputs.BRANCH_NAME }}
          
          echo "Pull Request created successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
