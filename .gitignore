# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is generally recommended to not include IDE-specific files in the project.
.idea/

# VS Code
.vscode/
*.code-workspace

# Local IDE settings
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific files
# =====================

# Temporary test files created by convert.py
test_rule.yml
temp_test_rule.yml

# Progress and state tracking files
conversion_progress.json
conversion_state.json
batch_progress.json
execution_state.json

# Temporary conversion files
temp_*
*.tmp
*.temp

# Sigma-CLI temporary files
sigma_temp/
sigma_output/
temp_sigma_*

# Backup files
*.bak
*.backup
*_backup
*_old

# Log files
*.log
logs/
debug.log
error.log
conversion.log

# Test files and test output
test_output/
test_results/
test_temp/
*_test.yml
*_test.yaml

# Downloaded sigma rules (if any)
sigma_rules/
downloaded_rules/
external_rules/

# Compiled sigma rules
compiled_rules/
*.compiled

# Cache directories
.cache/
cache/
__cache__/

# Configuration overrides
config_local.yml
config_local.yaml
local_config.*

# Secrets and sensitive data
secrets.yml
secrets.yaml
.env.local
.env.production
api_keys.txt
tokens.txt

# Large data files
*.gz
*.zip
*.tar
*.tar.gz
*.rar

# Rule processing artifacts
processed_rules/
failed_conversions/
conversion_errors/

# GitHub specific (keep workflows)
# .github/ - commented out to keep workflows

# Node modules (if any frontend tools are used)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Sigma-CLI installation artifacts
sigma-cli-*
sigma_plugins/

# UTMStack specific
converted_rules_test/
legacy_converted_rules/
old_converted_rules/

# Development and testing
dev_*
development/
sandbox/
playground/

# Documentation builds
doc_build/
documentation/_build/

# Profiling output
*.prof
profile_*

# Database files
*.db
*.sqlite
*.sqlite3

# Generated reports
reports/
*.report
conversion_report.*
